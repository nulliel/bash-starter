#!/usr/bin/env bash

##
##
##
##

################################################################################
## Module Loading
################################################################################

## Checks whether the filepath provided is a module
##
## Any file that contains the following first two lines
## will be treated as a module:
##
##   1: #!/usr/bin/env bash
##   2: # module
##
## Arguments:
##
##   $1 :: The path of the file to test
##
## Return:
##
##   0 :: If the file is a module
##   1 :: If the file is not a module
##
Module::IsModule()
{
    local path="${1}"
    local line; line="$(awk 'NR==2' "${path}")"

    # Regex to test for "# module"
    if [[ "${line}" =~ ^\#\ module ]]; then
        return 0
    fi

    return 1
}

## Checks whether the filepath provided is a module extension
##
## Module extensions are used to add functionality ontop of a
## predefined module without having to resort to using obscure
## names to skirt around duplicate module names.
##
## Module extensions may not however, replace already defined
## module functions.
##
## A module extension is defined by the following structure:
##
##   # module extends ModuleName
##
## Arguments:
##
##   $1 :: The path of the file to test
##
## Return:
##
##   PRINT :: The extended module
##   1     :: If the file is not a module
##
Module::IsExtension()
{
    local path="${1}"
    local line; line="$(awk 'NR==2' "${path}")"

    if ! Module::IsModule "${path}"; then
        return 1
    fi

    local parts
    readarray -d " " -t parts <<< "${line}"

    if [[ "${#parts[@]}" -ne 4 || "${parts[2]}" != "extends" ]]; then
        printf "Incorrect module extension declaration '${line}'\n" 1>&2
        exit 1
    fi

    printf "%s" "${parts[3]}"
}

## Verifies and loads a module
##
## Arguments:
##
##   $1 :: The path of the module to load
##
## Return:
##
##   0 :: When the module has been loaded
##
## Exits:
##
##   1 :: When the module has already been loaded
##   1 :: When the module failed verification
##
Module::Load()
{
    local path="${1}"
    local name;

    # The module name is the file name minus any extension
    name="$(basename "${path}")"
    name="${name%%.*}"
    name="${name^}"

    if Module::IsLoaded "${name}"; then
        printf "Module %s has already been loaded" "${name}" 1>&2
        exit 1
    fi

    local extension; extension="$(Module::IsExtension "${path}")" && {
        if ! Module::IsLoaded "${extension}"; then
            printf "Module %s must be loaded to import extension module %s" \
                   "${extension}"                                           \
                   "${path}"                                                \
                   1>&2
            exit 1
        fi
    }

    echo "hi"
    Coproc::Open
    echo "hi"
    Coproc::Send "source '${path}'"
    echo "hi"
    Coproc::Read

    Module::Verify "${name}"
    builtin source "${path}"

    Coproc::Close

    if declare -F "${name}::Initialize" 1>/dev/null 2>&1; then
        "${name}::Initialize"
        unset "${name}::Initialize"
    fi
}

Module::Verify()
{
    # Coproc::Send "declare -F"
    # Coproc::Read

    exit 1
}

################################################################################
## Module System
##################################################################################






################################################################################
## Module System
################################################################################

##
##
Module::Initialize()
{
    declare -ag BASH_STARTER_LOADED_MODULES=()

    Module::IsLoaded()
    {
        local moduleName="${1}"

        set +u
        if [[ "${BASH_STARTER_LOADED_MODULES[${moduleName}]:-1}" -eq 0 ]]; then
            set -u
            return 0
        fi
        set -u

        return 1
    }

    Module::SetLoaded()
    {
        local moduleName="${1}"

        BASH_STARTER_LOADED_MODULES["${moduleName}"]=0
    }
}






##
## Module System
################


## Adds a hook to the importer for loading modules
##
##
Module::Hook()
{
    local modulePath="${1}"

    if ! Module::IsModule "${modulePath}"; then
        return 0
    fi

    Module::Load "${modulePath}"

    return 1
}

import "core/coproc"
Import::AddHook Module::Hook
Module::Initialize

















###############################################################################
## Module Loading
###############################################################################

##
# Arguments:
#
#   $1 :: The path of the file to load
##
Module::Loade()
{
    local name;

    # The module name is the file name minus any extension
    name="$(basename "${1}")"
    name="${name%%.*}"

    Coproc::Open
    Coproc::Send "source '${1}'"
    Coproc::Read

    Module::ExtractFunctions "$name"

    Coproc::Close

    if declare -F "${name}.onActivate" 1>/dev/null 2>&1; then
        "${name}.onActivate"
    fi
}

###############################################################################
## Module Creation
###############################################################################

##
# Given an active coproc session, extracts all given functions
# and transforms them into a module sytax.
#
# All functions will be prefixed with the module name.
#
# e.g.
#
# Given a module defined in `print.sh`
#
#   doSomething() {
#       return 0
#   }
#
# Will be called as such:
#
#   print.doSomething
#
# Arguments:
#
#   $1 :: The module name
##
Module::ExtractFunctions()
{
    Coproc::Send "declare -F"

    local functions; mapfile -t functions < <(Coproc::Read)

    local activate=0

    for fn in "${functions[@]}"; do
        fn="$(echo "${fn}" | awk '{ print $3 }')"

        if [[ "$(xxd -pu <<< "${fn}")" == "0a" ]]; then
            continue
        fi

        Module::Stub "${fn}"
        Coproc::Send "declare -f ${fn}"

        eval "${1}.$(Coproc::Read)"
    done
}

##
# Stubs a module function to prevent it from being called directly.
#
# An attempt to call the function will instead call Module::StubDef.
##
Module::Stub()
{
    unset -f "${1}"
    eval "${1}() { Module::StubDef; }"
}

Module::StubDef()
{
    printf "Do not call functions directly. Use their module syntax. AT %s\n" "$(caller 1)" 1>&2
    exit 1
}
