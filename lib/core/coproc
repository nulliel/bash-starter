#!/usr/bin/env bash

declare -gi Coproc__IsOpen=1

## Creates a coproc
##
## The coproc will immediately run bash to start an
## interactive session which will leave it open to
## accept commands.
##
## Multi-coprocs are still an experimental feature
## in bash 4.X and will be disallowed.
##
## If multiple coprocs are opened, an error will be
## displayed and the process will exit.
##
Coproc::Open()
{
    if [[ "${Coproc__IsOpen}" -eq 0 ]]; then
        Coproc::Error "Attempting to open multiple coprocs"
    fi

    coproc Coproc__Coproc {
        bash
    }

    Coproc__IsOpen=0
}

## Destroys the active coproc
##
Coproc::Close()
{
    if [[ "${Coproc__IsOpen}" -eq 1 ]]; then
        Coproc::Error "Attempting to kill an inactive coproc"
    fi

    # Close the coproc file descriptor
    eval "exec ${Coproc__Coproc[1]}>&-"

    # Wait for the coproc process to close
    # shellcheck disable=SC2154
    wait "${Coproc__Coproc_PID}"

    Coproc__IsOpen=1
}

################################################################################
## Coproc IO
################################################################################

##
# Reads the buffer of the active coproc.
#
# To read the buffer into a variable, use a subshell:
#
#   local var="$(__bs__coproc_read)"
##
Coproc::Read()
{
    if [[ "${Coproc__IsOpen}" -eq 1 ]]; then
        printf "Attempting to read from a closed coproc.\n"
        exit 1
    fi

    while IFS= read -t0.01 -d $'\0' -n1 -ru "${Coproc__Coproc[0]}" line; do
        printf "%s" "${line}"
    done
}

## Sends a string `command` to the coproc.
##
## $1 - Command to send to the coproc
##
Coproc::Send()
{
    if [[ "${Coproc__IsOpen}" -eq 1 ]]; then
        printf "Attempting to send to a closed coproc.\n"
        exit 1
    fi

    printf "%s\n" "${1}" >&"${Coproc__Coproc[1]}"
}

Coproc::Error()
{
    printf "%s %s\n"              \
           "[\e[1;91mERROR\e[0m]" \
           "${1}"                 \
           1>&2

    exit 1
}
