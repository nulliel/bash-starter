#!/usr/bin/env bash

###############################################################################
## Module Loading
###############################################################################

##
# Checks whether a given file (path) is a module
#
# Any file that contains the following in its second line will
# be treated as a module:
#
#   1: #!/usr/bin/env bash
#   2: # module
#
# The space is optional.
#
# Arguments:
#
#   $1 :: The path of the file to test
#
# Return:
#
#   0 :: If the file is a module
#   1 :: If the file is not a module
##
__bs__is_module()
{
    local line; line="$(awk 'NR==2' "$1")"

    if [[ "$line" =~ ^\#\ ?module ]]; then
        return 0
    fi

    return 1
}

##
# Arguments:
#
#   $1 :: The path of the file to load
##
__bs__load_module()
{
    local name;

    # The module name is the file name minus any extension
    name="$(basename "${1}")"
    name="${name%%.*}"

    coproc_open
    coproc_send "source '${1}'"
    coproc_read

    __bs__add_module_functions "$name"

    coproc_close
}

###############################################################################
## Module Creation
###############################################################################

__bs__add_module_functions()
{
    coproc_send "declare -F"

    declare -a functions=(
        $(coproc_read)
    )

    local i=0
    local activate=0

    for fn in "${functions[@]}"; do
        i=$((i + 1))
        if [[ "${i}" -ne 3 ]]; then
            continue
        fi
        i=0

        if [[ "$(xxd -pu <<< "${fn}")" == "0a" ]]; then
            continue
        fi

        __bs__stub_fn "${fn}"

        coproc_send "declare -f ${fn}"

        eval "${1}.$(coproc_read)"

        if [[ "${fn}" == "on_activate" ]]; then
            activate=1
        fi
    done

    if [[ "${activate}" -eq 1 ]]; then
        "${1}".on_activate
    fi
}

__bs__stub_fn()
{
    unset -f "${1}"
    eval "${1}() { __bs__stub_fn_def; }"
}

__bs__stub_fn_def()
{
    printf "Do not call functions directly. Use their module syntax. AT %s\n" "$(caller 1)" 1>&2
    exit 1
}

###############################################################################
## Module Hook
###############################################################################

activate_module()
{
    local modulePath="${1}"

    if ! __bs__is_module "${modulePath}"; then
        return 0
    fi

    __bs__load_module "${modulePath}"

    return 1
}

import "core/coproc"
Import::addHook activate_module
